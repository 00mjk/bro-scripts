# This script builds hashes for files it identifies as executables on the
# network and checks the hash with the Team Cymru Malware Hash Registry (MHR)
#
# The Team Cymru Malware Hash Registry: http://www.team-cymru.org/Services/MHR/
# 
# Thanks for TC for making this valuable resource freely available!
#
# By: Seth Hall <hall.692@osu.edu
# On: 10/28/2008

@load http-identified-files

module HTTP;

# This function is used when expiring data from building_md5_sums
function expire_md5_sum(the_set: set[conn_id], index: conn_id): interval
	{
	# The data structure behind the md5_hash_* functions needs to be released.
	md5_hash_finish(index);
	return 0secs; # go ahead and delete this data now
	}

export {
	redef enum Notice += {
		# Generated when we see malware being downloaded.
		HTTP_Malware,
	};
	
	# This variable is for keeping track of the files that are currently
	# having hashes built.
	global building_md5_sums: set[conn_id] &write_expire=1min 
	                                       &expire_func=expire_md5_sum 
	                                       &redef;

	# These are the file types that are indexed in the MHR.
	const executable_mime = /application\/x-dosexec/    # Windows and DOS executables
	                      | /application\/x-executable/ &redef; # *NIX executable binary
	
}

# Once a file that we're interested has begun downloading, start building
# an MD5 hash.
event file_transferred(c: connection, prefix: string, descr: string, mime_type: string)
	{
	if(executable_mime in mime_type && c$id !in building_md5_sums)
		{
		add building_md5_sums[c$id];
		md5_hash_init(c$id);
		md5_hash_update(c$id, prefix);
		}
	}

# As the file downloads, continue building the hash.
event http_entity_data(c: connection, is_orig: bool, length: count, data: string)
	{
	if(!is_orig && c$id in building_md5_sums)
		md5_hash_update(c$id, data);
	}
	
# When the file finishes downloading, finish the hash, check for the hash
# in the MHR, and raise a notice if the hash is there.
event http_message_done(c: connection, is_orig: bool, stat: http_message_stat) &priority=5
	{
	if(!is_orig && c$id in building_md5_sums)
		{
		local s = lookup_http_request_stream(c);
		local msg = get_http_message(s, is_orig);
		local url = "<UNKNOWN>";
		local host = "";
		if( s$first_pending_request in s$requests )
			{
			local r = s$requests[s$first_pending_request];
			host = (s$next_request$host=="") ?
				fmt("%s", c$id$resp_h) : s$next_request$host;
			url = fmt("http://%s%s", host, r$URI);
			}
		
		local hash = md5_hash_finish(c$id);
		local hash_domain = fmt("%s.malware.hash.cymru.com", hash);
		when( local addrs = lookup_hostname(hash_domain) )
			{
			if( 127.0.0.2 in addrs )
				{
				local message = fmt("%s -> %s %s (hashed from the Team Cymru malware hash registry)", c$id$orig_h, hash, url);
				NOTICE([$note=HTTP_Malware, $msg=message, $conn=c,
				    $method=r$method, $URL=url]);
				}
			}
		delete building_md5_sums[c$id];
		}
	}